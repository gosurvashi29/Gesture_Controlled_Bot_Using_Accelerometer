
GESTUREcontrlBOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000002ca  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088a  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001bc  00000000  00000000  0000140b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000307  00000000  00000000  000015c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001fa  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ca  00000000  00000000  00001be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  7a:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8adc_readi>:
	return 0;
}			
		
	int adc_read(int channel)
	{
		ADMUX=0X40 + channel;
  82:	80 5c       	subi	r24, 0xC0	; 192
  84:	87 b9       	out	0x07, r24	; 7
		ADCSRA=0XD7;
  86:	87 ed       	ldi	r24, 0xD7	; 215
  88:	86 b9       	out	0x06, r24	; 6
		while((ADCSRA & 0X10) ==0);
  8a:	34 9b       	sbis	0x06, 4	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <_Z8adc_readi+0x8>
		return ADC;
  8e:	24 b1       	in	r18, 0x04	; 4
  90:	35 b1       	in	r19, 0x05	; 5
	}
  92:	82 2f       	mov	r24, r18
  94:	93 2f       	mov	r25, r19
  96:	08 95       	ret

00000098 <_Z8disp_cmdj>:
	void disp_cmd(unsigned int cmd)
	{
		PORTB=((cmd & 0XF0)+0X04);
  98:	9c 01       	movw	r18, r24
  9a:	20 7f       	andi	r18, 0xF0	; 240
  9c:	33 27       	eor	r19, r19
  9e:	2c 5f       	subi	r18, 0xFC	; 252
  a0:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	e9 ef       	ldi	r30, 0xF9	; 249
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	31 97       	sbiw	r30, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <_Z8disp_cmdj+0xe>
  aa:	00 c0       	rjmp	.+0      	; 0xac <_Z8disp_cmdj+0x14>
  ac:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB - 0X04;
  ae:	98 b3       	in	r25, 0x18	; 24
  b0:	94 50       	subi	r25, 0x04	; 4
  b2:	98 bb       	out	0x18, r25	; 24
		PORTB=(((cmd<<4)& 0XF0)+0X04);
  b4:	82 95       	swap	r24
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	8c 5f       	subi	r24, 0xFC	; 252
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	89 ef       	ldi	r24, 0xF9	; 249
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <_Z8disp_cmdj+0x28>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_Z8disp_cmdj+0x2e>
  c6:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB-0X04;
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	84 50       	subi	r24, 0x04	; 4
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret

000000d0 <_Z9disp_datai>:
		
	}
	void disp_data( int cmd)
	{
		PORTB=((cmd  & 0XF0)+0X05);
  d0:	9c 01       	movw	r18, r24
  d2:	20 7f       	andi	r18, 0xF0	; 240
  d4:	33 27       	eor	r19, r19
  d6:	2b 5f       	subi	r18, 0xFB	; 251
  d8:	28 bb       	out	0x18, r18	; 24
  da:	e9 ef       	ldi	r30, 0xF9	; 249
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z9disp_datai+0xe>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_Z9disp_datai+0x14>
  e4:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB - 0X04;
  e6:	28 b3       	in	r18, 0x18	; 24
  e8:	24 50       	subi	r18, 0x04	; 4
  ea:	28 bb       	out	0x18, r18	; 24
		PORTB=(((cmd <<4)& 0XF0)+0X05);
  ec:	82 95       	swap	r24
  ee:	92 95       	swap	r25
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	98 27       	eor	r25, r24
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	98 27       	eor	r25, r24
  f8:	8b 5f       	subi	r24, 0xFB	; 251
  fa:	88 bb       	out	0x18, r24	; 24
  fc:	89 ef       	ldi	r24, 0xF9	; 249
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <_Z9disp_datai+0x30>
 104:	00 c0       	rjmp	.+0      	; 0x106 <_Z9disp_datai+0x36>
 106:	00 00       	nop
		_delay_ms(1);
		PORTB=PORTB-0X04;
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	84 50       	subi	r24, 0x04	; 4
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	08 95       	ret

00000110 <_Z11disp_stringPc>:
		
	}

	void disp_string( char *str)
	{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
		int i=0;
		while (str[i]!='\0')
 116:	88 81       	ld	r24, Y
 118:	88 23       	and	r24, r24
 11a:	39 f0       	breq	.+14     	; 0x12a <_Z11disp_stringPc+0x1a>
		_delay_ms(1);
		PORTB=PORTB-0X04;
		
	}

	void disp_string( char *str)
 11c:	21 96       	adiw	r28, 0x01	; 1
	{
		int i=0;
		while (str[i]!='\0')
		{
			disp_data (str[i]);
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 68 00 	call	0xd0	; 0xd0 <_Z9disp_datai>
	}

	void disp_string( char *str)
	{
		int i=0;
		while (str[i]!='\0')
 124:	89 91       	ld	r24, Y+
 126:	81 11       	cpse	r24, r1
 128:	fa cf       	rjmp	.-12     	; 0x11e <_Z11disp_stringPc+0xe>
		{
			disp_data (str[i]);
			i++;
			
		}
	}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <_Z8lcd_initv>:
		}
		disp_cmd (0X06);
	}
	void lcd_init()
	{
		disp_cmd(0X02);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		disp_cmd(0X28);
 138:	88 e2       	ldi	r24, 0x28	; 40
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		disp_cmd(0X0C);
 140:	8c e0       	ldi	r24, 0x0C	; 12
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		disp_cmd(0X06);
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
 150:	08 95       	ret

00000152 <_Z4leftv>:
	}	
			
	
	void left()
	{
		PORTD=0X10;
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	82 bb       	out	0x12, r24	; 18
		
		disp_cmd(0X86);
 156:	86 e8       	ldi	r24, 0x86	; 134
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		disp_string ( "LEFT    ");
 15e:	80 e6       	ldi	r24, 0x60	; 96
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 88 00 	call	0x110	; 0x110 <_Z11disp_stringPc>
 166:	83 ec       	ldi	r24, 0xC3	; 195
 168:	99 e0       	ldi	r25, 0x09	; 9
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <_Z4leftv+0x18>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <_Z4leftv+0x1e>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <_Z5rightv>:
		
	}

	void right()
	{
		PORTD=0x40;
 174:	80 e4       	ldi	r24, 0x40	; 64
 176:	82 bb       	out	0x12, r24	; 18
	
		disp_cmd(0X86);
 178:	86 e8       	ldi	r24, 0x86	; 134
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		disp_string ( "RIGHT    ");
 180:	89 e6       	ldi	r24, 0x69	; 105
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 88 00 	call	0x110	; 0x110 <_Z11disp_stringPc>
 188:	83 ec       	ldi	r24, 0xC3	; 195
 18a:	99 e0       	ldi	r25, 0x09	; 9
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <_Z5rightv+0x18>
 190:	00 c0       	rjmp	.+0      	; 0x192 <_Z5rightv+0x1e>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <_Z7forwardv>:
		_delay_ms(10);
	}

	void forward()
	{
		PORTD=0X50;
 196:	80 e5       	ldi	r24, 0x50	; 80
 198:	82 bb       	out	0x12, r24	; 18
	
		disp_cmd(0X86);
 19a:	86 e8       	ldi	r24, 0x86	; 134
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>

		disp_string ( "FORWARD ");
 1a2:	83 e7       	ldi	r24, 0x73	; 115
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 88 00 	call	0x110	; 0x110 <_Z11disp_stringPc>
 1aa:	83 ec       	ldi	r24, 0xC3	; 195
 1ac:	99 e0       	ldi	r25, 0x09	; 9
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <_Z7forwardv+0x18>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_Z7forwardv+0x1e>
 1b4:	00 00       	nop
 1b6:	08 95       	ret

000001b8 <_Z8backwardv>:
		_delay_ms(10);
	}
	void backward()
	{
		PORTD=0XA0;
 1b8:	80 ea       	ldi	r24, 0xA0	; 160
 1ba:	82 bb       	out	0x12, r24	; 18
		
		disp_cmd(0X86);
 1bc:	86 e8       	ldi	r24, 0x86	; 134
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
		
		disp_string ( "BACKWARD ");
 1c4:	8c e7       	ldi	r24, 0x7C	; 124
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 88 00 	call	0x110	; 0x110 <_Z11disp_stringPc>
 1cc:	83 ec       	ldi	r24, 0xC3	; 195
 1ce:	99 e0       	ldi	r25, 0x09	; 9
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_Z8backwardv+0x18>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z8backwardv+0x1e>
 1d6:	00 00       	nop
 1d8:	08 95       	ret

000001da <_Z5motorii>:
		disp_cmd(0X28);
		disp_cmd(0X0C);
		disp_cmd(0X06);
	}
	void motor(int k,int l)
	{
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	8b 01       	movw	r16, r22
		
		
		
		if ((k>360 && k<390) && (l>400))
 1e4:	c8 2f       	mov	r28, r24
 1e6:	d9 2f       	mov	r29, r25
 1e8:	ce 01       	movw	r24, r28
 1ea:	89 56       	subi	r24, 0x69	; 105
 1ec:	91 40       	sbci	r25, 0x01	; 1
 1ee:	4d 97       	sbiw	r24, 0x1d	; 29
 1f0:	30 f4       	brcc	.+12     	; 0x1fe <_Z5motorii+0x24>
 1f2:	61 39       	cpi	r22, 0x91	; 145
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	78 07       	cpc	r23, r24
 1f8:	14 f0       	brlt	.+4      	; 0x1fe <_Z5motorii+0x24>
		{
			forward();
 1fa:	0e 94 cb 00 	call	0x196	; 0x196 <_Z7forwardv>
			//disp_string("FORWARD");
		}
		if ((k>250 && k<300) && (l>380 && l<400))
 1fe:	ce 01       	movw	r24, r28
 200:	8b 5f       	subi	r24, 0xFB	; 251
 202:	91 09       	sbc	r25, r1
 204:	c1 97       	sbiw	r24, 0x31	; 49
 206:	38 f4       	brcc	.+14     	; 0x216 <_Z5motorii+0x3c>
 208:	c8 01       	movw	r24, r16
 20a:	8d 57       	subi	r24, 0x7D	; 125
 20c:	91 40       	sbci	r25, 0x01	; 1
 20e:	43 97       	sbiw	r24, 0x13	; 19
 210:	10 f4       	brcc	.+4      	; 0x216 <_Z5motorii+0x3c>
		{
			left();
 212:	0e 94 a9 00 	call	0x152	; 0x152 <_Z4leftv>
			//disp_string("LEFT");
		}
		if ((k>390 && k<450) && (l>360 && l<380))
 216:	ce 01       	movw	r24, r28
 218:	87 58       	subi	r24, 0x87	; 135
 21a:	91 40       	sbci	r25, 0x01	; 1
 21c:	cb 97       	sbiw	r24, 0x3b	; 59
 21e:	38 f4       	brcc	.+14     	; 0x22e <_Z5motorii+0x54>
 220:	c8 01       	movw	r24, r16
 222:	89 56       	subi	r24, 0x69	; 105
 224:	91 40       	sbci	r25, 0x01	; 1
 226:	43 97       	sbiw	r24, 0x13	; 19
 228:	10 f4       	brcc	.+4      	; 0x22e <_Z5motorii+0x54>
		{
			right();
 22a:	0e 94 ba 00 	call	0x174	; 0x174 <_Z5rightv>
			//disp_string("RIGHT");
		}
		if ((k>300 && k<360) && (l>300 && l< 400))
 22e:	cd 52       	subi	r28, 0x2D	; 45
 230:	d1 40       	sbci	r29, 0x01	; 1
 232:	eb 97       	sbiw	r28, 0x3b	; 59
 234:	38 f4       	brcc	.+14     	; 0x244 <_Z5motorii+0x6a>
 236:	0d 52       	subi	r16, 0x2D	; 45
 238:	11 40       	sbci	r17, 0x01	; 1
 23a:	03 36       	cpi	r16, 0x63	; 99
 23c:	11 05       	cpc	r17, r1
 23e:	10 f4       	brcc	.+4      	; 0x244 <_Z5motorii+0x6a>
		{
			backward();
 240:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z8backwardv>
			//disp_string("BACKWARD");
		}
	}	
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	08 95       	ret

0000024e <main>:
void stop();
void backward();
int main(void)
{
	
	DDRB = 0XFF;
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	87 bb       	out	0x17, r24	; 23
	DDRD=0XFF;
 252:	81 bb       	out	0x11, r24	; 17
	lcd_init();
 254:	0e 94 98 00 	call	0x130	; 0x130 <_Z8lcd_initv>
	disp_cmd(0X80);
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
	disp_string("WELCOME");
 260:	86 e8       	ldi	r24, 0x86	; 134
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 88 00 	call	0x110	; 0x110 <_Z11disp_stringPc>
 268:	2f e3       	ldi	r18, 0x3F	; 63
 26a:	8d e0       	ldi	r24, 0x0D	; 13
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x20>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x2a>
 278:	00 00       	nop
	_delay_ms(1000);
	disp_cmd(0X01);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
 282:	83 ef       	ldi	r24, 0xF3	; 243
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <main+0x38>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x3e>
 28c:	00 00       	nop
	_delay_ms(2);
	disp_cmd(0X80);
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 4c 00 	call	0x98	; 0x98 <_Z8disp_cmdj>
	disp_string("Enter the value");
 296:	8e e8       	ldi	r24, 0x8E	; 142
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 88 00 	call	0x110	; 0x110 <_Z11disp_stringPc>

	
	int X,Y;
	while (1)
	{
		X=adc_read(0);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 41 00 	call	0x82	; 0x82 <_Z8adc_readi>
 2a6:	ec 01       	movw	r28, r24
		Y=adc_read(1);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 41 00 	call	0x82	; 0x82 <_Z8adc_readi>
		//disp_cmd(0XC5);
		//disp_num(Y);
		
		
		
		motor(X,Y);
 2b0:	bc 01       	movw	r22, r24
 2b2:	ce 01       	movw	r24, r28
 2b4:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z5motorii>
 2b8:	87 ea       	ldi	r24, 0xA7	; 167
 2ba:	91 e6       	ldi	r25, 0x61	; 97
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x6e>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <main+0x74>
 2c2:	00 00       	nop
 2c4:	ec cf       	rjmp	.-40     	; 0x29e <main+0x50>

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
